{"ast":null,"code":"const API_BASE_URL = 'http://localhost:3001';\n\n// Fallback mock data in case backend is not available\nconst fallbackTeachers = [{\n  id: 1,\n  name: \"Dr. Sarah Johnson\",\n  subject: \"Mathematics\",\n  email: \"sarah.johnson@school.edu\",\n  phone: \"+1-555-0101\",\n  experience: \"8 years\",\n  avatar: \"https://images.unsplash.com/photo-1494790108755-2616b612b786?w=150\"\n}, {\n  id: 2,\n  name: \"Prof. Michael Chen\",\n  subject: \"Physics\",\n  email: \"michael.chen@school.edu\",\n  phone: \"+1-555-0102\",\n  experience: \"12 years\",\n  avatar: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150\"\n}];\nconst fallbackStudents = [{\n  id: 1,\n  name: \"Alice Brown\",\n  grade: \"A\",\n  email: \"alice.brown@student.edu\",\n  phone: \"+1-555-0201\",\n  teacherId: 1,\n  avatar: \"https://images.unsplash.com/photo-1534528741775-53994a69daeb?w=150\"\n}, {\n  id: 2,\n  name: \"Bob Smith\",\n  grade: \"B+\",\n  email: \"bob.smith@student.edu\",\n  phone: \"+1-555-0202\",\n  teacherId: 1,\n  avatar: \"https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=150\"\n}, {\n  id: 3,\n  name: \"Carol White\",\n  grade: \"A-\",\n  email: \"carol.white@student.edu\",\n  phone: \"+1-555-0203\",\n  teacherId: 2,\n  avatar: \"https://images.unsplash.com/photo-1544005313-94ddf0286df2?w=150\"\n}];\nlet isBackendAvailable = true;\nexport const apiService = {\n  async getTeachers() {\n    if (!isBackendAvailable) {\n      return fallbackTeachers;\n    }\n    try {\n      const response = await fetch(`${API_BASE_URL}/teachers`);\n      if (!response.ok) throw new Error('Failed to fetch teachers');\n      return response.json();\n    } catch (error) {\n      console.warn('Backend not available, using fallback data:', error);\n      isBackendAvailable = false;\n      return fallbackTeachers;\n    }\n  },\n  async getStudents() {\n    if (!isBackendAvailable) {\n      return fallbackStudents;\n    }\n    try {\n      const response = await fetch(`${API_BASE_URL}/students`);\n      if (!response.ok) throw new Error('Failed to fetch students');\n      return response.json();\n    } catch (error) {\n      console.warn('Backend not available, using fallback data:', error);\n      isBackendAvailable = false;\n      return fallbackStudents;\n    }\n  },\n  async getTeachersWithStudents() {\n    try {\n      const [teachers, students] = await Promise.all([this.getTeachers(), this.getStudents()]);\n      return teachers.map(teacher => ({\n        ...teacher,\n        students: students.filter(student => student.teacherId === teacher.id)\n      }));\n    } catch (error) {\n      console.error('Error combining data:', error);\n      // Return fallback combined data\n      return fallbackTeachers.map(teacher => ({\n        ...teacher,\n        students: fallbackStudents.filter(student => student.teacherId === teacher.id)\n      }));\n    }\n  }\n};","map":{"version":3,"names":["API_BASE_URL","fallbackTeachers","id","name","subject","email","phone","experience","avatar","fallbackStudents","grade","teacherId","isBackendAvailable","apiService","getTeachers","response","fetch","ok","Error","json","error","console","warn","getStudents","getTeachersWithStudents","teachers","students","Promise","all","map","teacher","filter","student"],"sources":["A:/Desktop/school/school-management/web/src/services/api.ts"],"sourcesContent":["import { Teacher, Student, TeacherWithStudents } from '../../../shared/types';\n\nconst API_BASE_URL = 'http://localhost:3001';\n\n// Fallback mock data in case backend is not available\nconst fallbackTeachers: Teacher[] = [\n  {\n    id: 1,\n    name: \"Dr. Sarah Johnson\",\n    subject: \"Mathematics\",\n    email: \"sarah.johnson@school.edu\",\n    phone: \"+1-555-0101\",\n    experience: \"8 years\",\n    avatar: \"https://images.unsplash.com/photo-1494790108755-2616b612b786?w=150\"\n  },\n  {\n    id: 2,\n    name: \"Prof. Michael Chen\",\n    subject: \"Physics\",\n    email: \"michael.chen@school.edu\",\n    phone: \"+1-555-0102\",\n    experience: \"12 years\",\n    avatar: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150\"\n  }\n];\n\nconst fallbackStudents: Student[] = [\n  {\n    id: 1,\n    name: \"Alice Brown\",\n    grade: \"A\",\n    email: \"alice.brown@student.edu\",\n    phone: \"+1-555-0201\",\n    teacherId: 1,\n    avatar: \"https://images.unsplash.com/photo-1534528741775-53994a69daeb?w=150\"\n  },\n  {\n    id: 2,\n    name: \"Bob Smith\",\n    grade: \"B+\",\n    email: \"bob.smith@student.edu\",\n    phone: \"+1-555-0202\",\n    teacherId: 1,\n    avatar: \"https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=150\"\n  },\n  {\n    id: 3,\n    name: \"Carol White\",\n    grade: \"A-\",\n    email: \"carol.white@student.edu\",\n    phone: \"+1-555-0203\",\n    teacherId: 2,\n    avatar: \"https://images.unsplash.com/photo-1544005313-94ddf0286df2?w=150\"\n  }\n];\n\nlet isBackendAvailable = true;\n\nexport const apiService = {\n  async getTeachers(): Promise<Teacher[]> {\n    if (!isBackendAvailable) {\n      return fallbackTeachers;\n    }\n\n    try {\n      const response = await fetch(`${API_BASE_URL}/teachers`);\n      if (!response.ok) throw new Error('Failed to fetch teachers');\n      return response.json();\n    } catch (error) {\n      console.warn('Backend not available, using fallback data:', error);\n      isBackendAvailable = false;\n      return fallbackTeachers;\n    }\n  },\n\n  async getStudents(): Promise<Student[]> {\n    if (!isBackendAvailable) {\n      return fallbackStudents;\n    }\n\n    try {\n      const response = await fetch(`${API_BASE_URL}/students`);\n      if (!response.ok) throw new Error('Failed to fetch students');\n      return response.json();\n    } catch (error) {\n      console.warn('Backend not available, using fallback data:', error);\n      isBackendAvailable = false;\n      return fallbackStudents;\n    }\n  },\n\n  async getTeachersWithStudents(): Promise<TeacherWithStudents[]> {\n    try {\n      const [teachers, students] = await Promise.all([\n        this.getTeachers(),\n        this.getStudents()\n      ]);\n\n      return teachers.map(teacher => ({\n        ...teacher,\n        students: students.filter(student => student.teacherId === teacher.id)\n      }));\n    } catch (error) {\n      console.error('Error combining data:', error);\n      // Return fallback combined data\n      return fallbackTeachers.map(teacher => ({\n        ...teacher,\n        students: fallbackStudents.filter(student => student.teacherId === teacher.id)\n      }));\n    }\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}