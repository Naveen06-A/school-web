{"ast":null,"code":"import _objectSpread from\"A:/Desktop/web/web/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";const API_BASE_URL='http://localhost:3001';// Fallback mock data in case backend is not available\nconst fallbackTeachers=[{id:1,name:\"Dr. Sarah Johnson\",subject:\"Mathematics\",email:\"sarah.johnson@school.edu\",phone:\"+1-555-0101\",experience:\"8 years\",avatar:\"https://images.unsplash.com/photo-1494790108755-2616b612b786?w=150\"},{id:2,name:\"Prof. Michael Chen\",subject:\"Physics\",email:\"michael.chen@school.edu\",phone:\"+1-555-0102\",experience:\"12 years\",avatar:\"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150\"}];const fallbackStudents=[{id:1,name:\"Alice Brown\",grade:\"A\",email:\"alice.brown@student.edu\",phone:\"+1-555-0201\",teacherId:1,avatar:\"https://images.unsplash.com/photo-1534528741775-53994a69daeb?w=150\"},{id:2,name:\"Bob Smith\",grade:\"B+\",email:\"bob.smith@student.edu\",phone:\"+1-555-0202\",teacherId:1,avatar:\"https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=150\"},{id:3,name:\"Carol White\",grade:\"A-\",email:\"carol.white@student.edu\",phone:\"+1-555-0203\",teacherId:2,avatar:\"https://images.unsplash.com/photo-1544005313-94ddf0286df2?w=150\"}];let isBackendAvailable=true;export const apiService={async getTeachers(){if(!isBackendAvailable){return fallbackTeachers;}try{const response=await fetch(\"\".concat(API_BASE_URL,\"/teachers\"));if(!response.ok)throw new Error('Failed to fetch teachers');return response.json();}catch(error){console.warn('Backend not available, using fallback data:',error);isBackendAvailable=false;return fallbackTeachers;}},async getStudents(){if(!isBackendAvailable){return fallbackStudents;}try{const response=await fetch(\"\".concat(API_BASE_URL,\"/students\"));if(!response.ok)throw new Error('Failed to fetch students');return response.json();}catch(error){console.warn('Backend not available, using fallback data:',error);isBackendAvailable=false;return fallbackStudents;}},async getTeachersWithStudents(){try{const[teachers,students]=await Promise.all([this.getTeachers(),this.getStudents()]);return teachers.map(teacher=>_objectSpread(_objectSpread({},teacher),{},{students:students.filter(student=>student.teacherId===teacher.id)}));}catch(error){console.error('Error combining data:',error);// Return fallback combined data\nreturn fallbackTeachers.map(teacher=>_objectSpread(_objectSpread({},teacher),{},{students:fallbackStudents.filter(student=>student.teacherId===teacher.id)}));}}};","map":{"version":3,"names":["API_BASE_URL","fallbackTeachers","id","name","subject","email","phone","experience","avatar","fallbackStudents","grade","teacherId","isBackendAvailable","apiService","getTeachers","response","fetch","concat","ok","Error","json","error","console","warn","getStudents","getTeachersWithStudents","teachers","students","Promise","all","map","teacher","_objectSpread","filter","student"],"sources":["A:/Desktop/web/web/src/services/api.ts"],"sourcesContent":["import { Teacher, Student, TeacherWithStudents } from '../../../shared/types';\n\nconst API_BASE_URL = 'http://localhost:3001';\n\n// Fallback mock data in case backend is not available\nconst fallbackTeachers: Teacher[] = [\n  {\n    id: 1,\n    name: \"Dr. Sarah Johnson\",\n    subject: \"Mathematics\",\n    email: \"sarah.johnson@school.edu\",\n    phone: \"+1-555-0101\",\n    experience: \"8 years\",\n    avatar: \"https://images.unsplash.com/photo-1494790108755-2616b612b786?w=150\"\n  },\n  {\n    id: 2,\n    name: \"Prof. Michael Chen\",\n    subject: \"Physics\",\n    email: \"michael.chen@school.edu\",\n    phone: \"+1-555-0102\",\n    experience: \"12 years\",\n    avatar: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150\"\n  }\n];\n\nconst fallbackStudents: Student[] = [\n  {\n    id: 1,\n    name: \"Alice Brown\",\n    grade: \"A\",\n    email: \"alice.brown@student.edu\",\n    phone: \"+1-555-0201\",\n    teacherId: 1,\n    avatar: \"https://images.unsplash.com/photo-1534528741775-53994a69daeb?w=150\"\n  },\n  {\n    id: 2,\n    name: \"Bob Smith\",\n    grade: \"B+\",\n    email: \"bob.smith@student.edu\",\n    phone: \"+1-555-0202\",\n    teacherId: 1,\n    avatar: \"https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=150\"\n  },\n  {\n    id: 3,\n    name: \"Carol White\",\n    grade: \"A-\",\n    email: \"carol.white@student.edu\",\n    phone: \"+1-555-0203\",\n    teacherId: 2,\n    avatar: \"https://images.unsplash.com/photo-1544005313-94ddf0286df2?w=150\"\n  }\n];\n\nlet isBackendAvailable = true;\n\nexport const apiService = {\n  async getTeachers(): Promise<Teacher[]> {\n    if (!isBackendAvailable) {\n      return fallbackTeachers;\n    }\n\n    try {\n      const response = await fetch(`${API_BASE_URL}/teachers`);\n      if (!response.ok) throw new Error('Failed to fetch teachers');\n      return response.json();\n    } catch (error) {\n      console.warn('Backend not available, using fallback data:', error);\n      isBackendAvailable = false;\n      return fallbackTeachers;\n    }\n  },\n\n  async getStudents(): Promise<Student[]> {\n    if (!isBackendAvailable) {\n      return fallbackStudents;\n    }\n\n    try {\n      const response = await fetch(`${API_BASE_URL}/students`);\n      if (!response.ok) throw new Error('Failed to fetch students');\n      return response.json();\n    } catch (error) {\n      console.warn('Backend not available, using fallback data:', error);\n      isBackendAvailable = false;\n      return fallbackStudents;\n    }\n  },\n\n  async getTeachersWithStudents(): Promise<TeacherWithStudents[]> {\n    try {\n      const [teachers, students] = await Promise.all([\n        this.getTeachers(),\n        this.getStudents()\n      ]);\n\n      return teachers.map(teacher => ({\n        ...teacher,\n        students: students.filter(student => student.teacherId === teacher.id)\n      }));\n    } catch (error) {\n      console.error('Error combining data:', error);\n      // Return fallback combined data\n      return fallbackTeachers.map(teacher => ({\n        ...teacher,\n        students: fallbackStudents.filter(student => student.teacherId === teacher.id)\n      }));\n    }\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}